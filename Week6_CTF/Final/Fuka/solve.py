from Crypto.Util.number import *
from z3 import *

c0 = bytes_to_long(bytes([0xD9, 0xE0, 0x8B, 0x0B, 0xC5, 0x85, 0x8E, 0x62, 0xEE, 0x0B])[::-1])
c1 = bytes_to_long(bytes([0x55, 0x9E, 0x28, 0x98, 0xC4, 0x05, 0xFE, 0xA3, 0x5F, 0x65])[::-1])
c2 = bytes_to_long(bytes([0x01, 0xB1, 0x3D, 0xC7, 0x06, 0x7C, 0xC9, 0x82, 0x06, 0x14])[::-1])
c3 = bytes_to_long(bytes([0x77, 0xC8, 0xE3, 0xE9, 0x8B, 0x0F, 0x2F, 0xD3, 0xAB, 0x10])[::-1])
c4 = bytes_to_long(bytes([0xF1, 0xBD, 0x01, 0x43, 0x24, 0x1A, 0x57, 0xA0, 0xFC, 0x56])[::-1])
c5 = bytes_to_long(bytes([0x3D, 0x18, 0xB7, 0x93, 0x8A, 0xC7, 0x31, 0x9C, 0xE8, 0xAF])[::-1])
c6 = bytes_to_long(bytes([0xD9, 0x54, 0x6C, 0x74, 0x31, 0x78, 0x70, 0xE6, 0x6D, 0x06])[::-1])
c7 = bytes_to_long(bytes([0xFB, 0xDB, 0x27, 0x14, 0xC5, 0x48, 0xF7, 0x14, 0x7D, 0x5C])[::-1])
c8 = bytes_to_long(bytes([0xEF, 0x95, 0x37, 0x7D, 0x7F, 0x73, 0xB9, 0x7F, 0x38, 0x87])[::-1])

# Fake Flag:
# res0 = bytes_to_long(bytes([0x33, 0xF2, 0x32, 0x07, 0x96, 0xA2, 0x37, 0x9B, 0x9C, 0x5B, 
#   0xE0, 0x3A, 0x8B, 0x96, 0x18, 0xD7, 0x4D, 0xB2, 0xF6, 0x24])[::-1])
# res1 = bytes_to_long(bytes([0xFD, 0x4B, 0x48, 0x79, 0x21, 0x23, 0x47, 0xDE, 0x48, 0x17, 
#   0xBC, 0x8D, 0x69, 0x42, 0x43, 0xD1, 0xAF, 0x71, 0x3B, 0x48])[::-1])
# res2 = bytes_to_long(bytes([0xE3, 0x0C, 0x05, 0xD4, 0xB8, 0x47, 0xD0, 0xFA, 0x70, 0x72, 
#   0x78, 0x44, 0xF6, 0x78, 0xEC, 0xE8, 0x91, 0x29, 0xC6, 0x3B])[::-1])

res0 = bytes_to_long(bytes([0x43, 0xE6, 0x0E, 0x73, 0xC4, 0xFA, 0x26, 0x37, 0xD7, 0xF8, 
  0xC3, 0x2C, 0xC8, 0x57, 0x8A, 0x8F, 0xAA, 0x01, 0x86, 0x0D])[::-1])
res1 = bytes_to_long(bytes([0xF7, 0x61, 0x51, 0xE7, 0x0A, 0x93, 0x04, 0xB8, 0xCD, 0x0C, 
  0x78, 0x1C, 0x0E, 0x20, 0x3F, 0xD2, 0x0A, 0x65, 0x05, 0x65])[::-1])
res2 = bytes_to_long(bytes([0x83, 0x30, 0xE8, 0xFE, 0x14, 0xCD, 0x10, 0x7E, 0x43, 0x36, 
  0x86, 0xC3, 0xCA, 0xE1, 0x1A, 0x98, 0xE8, 0x7D, 0xB1, 0x4D])[::-1])

x0, x1, x2 = Ints('x0 x1 x2')

solver = Solver()

solver.add(x0*c0 + x1*c1 - x2*c2 == res0)
solver.add(x0*c3 + x1*c4 + x2*c5 == res1)
solver.add(x0*c6 - x1*c7 - x2*c8 == -res2)

flag = ''
if solver.check() == sat:
    model = solver.model()
    print("Tìm thấy nghiệm nguyên dương!")
    print(f"x0 = {model[x0]}")
    print(f"x1 = {model[x1]}")
    print(f"x2 = {model[x2]}")
    flag += long_to_bytes(model[x0].as_long()).decode() + long_to_bytes(model[x1].as_long()).decode() + long_to_bytes(model[x2].as_long()).decode()
    print(flag)
else:
    print("Không tìm thấy nghiệm nguyên dương nào cho hệ phương trình.")

# flag: ASCIS{Cpp_1s_34SY_bUt_(TT_TT)}